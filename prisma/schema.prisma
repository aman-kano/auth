generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FLEET_MANAGER
  DRONE_OPERATOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  passwordHash  String
  mfaEnabled    Boolean   @default(false)
  mfaSecret     String?
  resetToken    String?   @unique
  resetTokenExp DateTime?
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  mfaSecrets    MfaSecret[]
  roles         Role[]    @relation("UserRoles")
  oauthAccounts OAuthAccount[]
  lastLoginAt   DateTime?
  failedLoginAttempts Int @default(0)
  lockedUntil   DateTime?
  trustedDevices TrustedDevice[]
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  permissions Permission[]
  users       User[]       @relation("UserRoles")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isSystem    Boolean      @default(false)

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  resource    String
  action      String
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([resource, action])
  @@map("permissions")
}

model MfaSecret {
  id        String   @id @default(uuid())
  secret    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@map("mfa_secrets")
}

model TrustedDevice {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  deviceId  String
  deviceName String?
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, deviceId])
}

model OAuthAccount {
  id          String   @id @default(uuid())
  provider    String
  providerId  String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([provider, providerId])
  @@map("oauth_accounts")
} 